<div class="container">
	<div class="row">
		<div class="span12"><h1>FLAC Song Player</h1></div>
	</div>
	<div class="row">
		<div class="span2"><p>Artist: <span id="artist"></span></p></div>
		<div class="span2"><p>Song: <span id="song"></span></p></div>
		<div class="span2"><p>Time: <span id="time"></span></p></div>
		<div class="span2"><p>Format: <span id="format"></span></p></div>
	</div>
	<div class="row">
		<div class="progress progress-info">
			<div class="bar" id="loadBar"
			style="width: 0%;"></div>
		</div>
	</div>
	<div class="row">
		<div class="progress progress-sucess" id="timeBarContainer">
			<div class="bar" id="timeBar"
			style="width: 0%;"></div>
		</div>
	</div>
	<div class="row">
		<div class="span1"><i class="icon-play"></i></div>
		<div class="span1"><i class="icon-pause"></i></div>
	</div>
	<script>
		$(document).ready(function () {

			var Base64Binary = {
				_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
				
				/* will return a  Uint8Array type */
				decodeArrayBuffer: function(input) {
					var bytes = Math.ceil( (3*input.length) / 4.0);
					var ab = new ArrayBuffer(bytes);
					this.decode(input, ab);
					
					return ab;
				},
				
				decode: function(input, arrayBuffer) {
					//get last chars to see if are valid
					var lkey1 = this._keyStr.indexOf(input.charAt(input.length-1));		 
					var lkey2 = this._keyStr.indexOf(input.charAt(input.length-1));		 
				
					var bytes = Math.ceil( (3*input.length) / 4.0);
					if (lkey1 == 64) bytes--; //padding chars, so skip
					if (lkey2 == 64) bytes--; //padding chars, so skip
					
					var uarray;
					var chr1, chr2, chr3;
					var enc1, enc2, enc3, enc4;
					var i = 0;
					var j = 0;
					
					if (arrayBuffer)
						uarray = new Uint8Array(arrayBuffer);
					else
						uarray = new Uint8Array(bytes);
					
					input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
					
					for (i=0; i<bytes; i+=3) {	
						//get the 3 octects in 4 ascii chars
						enc1 = this._keyStr.indexOf(input.charAt(j++));
						enc2 = this._keyStr.indexOf(input.charAt(j++));
						enc3 = this._keyStr.indexOf(input.charAt(j++));
						enc4 = this._keyStr.indexOf(input.charAt(j++));
				
						chr1 = (enc1 << 2) | (enc2 >> 4);
						chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
						chr3 = ((enc3 & 3) << 6) | enc4;
				
						uarray[i] = chr1;			
						if (enc3 != 64) uarray[i+1] = chr2;
						if (enc4 != 64) uarray[i+2] = chr3;
					}
				
					return uarray;	
				}
			}

			function decodeHandler(buffer) {
		        console.log(data);
		    }

			var context = new webkitAudioContext();

			var socket = io.connect('/');
			socket.on('message', function(data) {
				data = Base64Binary.decodeArrayBuffer(data);
				context.decodeAudioData(data, decodeHandler, function(e) { console.log(e); });
			});

			// Chrome doesn't support changing the sample rate, and uses whatever the hardware supports.
			// We cheat here.  Instead of resampling on the fly, we're currently just loading two different
			// files based on common hardware sample rates.
			var _sampleRate = (function() {
				var AudioContext = (window.AudioContext || window.webkitAudioContext);
				if (!AudioContext)
					return 44100;

				return new AudioContext().sampleRate;
			}());

			var url = '/media/test-'+_sampleRate+'-16b.flac';
			//url = '/media/test.flac';
			console.log(url);
			var player = Player.fromURL(url);
			player.volume = 100;
			player.preload();
			player.play();

			player.on('progress', function(time) {
				var secs = time/1000;
				var duration = player.duration;
				var durSecs = duration/1000;
				var loc = time/duration*100;
				$("#timeBar").css('width',loc+'%');
				var progressTimeDisplay = Math.floor(secs/60)+":"+Math.floor(secs-Math.floor(secs/60)*60)
				var totalTimeDisplay = Math.floor(durSecs/60)+":"+Math.floor(durSecs-Math.floor(durSecs/60)*60)
				$("#time").text(progressTimeDisplay+" - "+totalTimeDisplay);
				$("#artist").text(player.metadata.ARTIST);
				$("#song").text(player.metadata.TITLE);
				$("#format").text(player.format.formatID + " " + player.format.sampleRate + "Hz " + player.format.bitsPerChannel + "bit");
			});

			player.on('buffer', function(time) {
				$("#loadBar").css('width',time+'%');
			});

			$(".row").on("click", "#timeBarContainer", function(event){
				var percentClick = event.offsetX/$(this).width();
				var duration = player.duration;
				var newTime = percentClick*duration;
				console.log(newTime);
			});

			$(".row").on("click", ".icon-play", function(event){
				 player.play();
			});
			$(".row").on("click", ".icon-pause", function(event){
				 player.pause();
			});
		});
	</script>
</div>